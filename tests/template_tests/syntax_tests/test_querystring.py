from django.http import QueryDict
from django.template import RequestContext
from django.test import RequestFactory, SimpleTestCase

from ..utils import setup


class QueryStringTagTests(SimpleTestCase):
    def setUp(self):
        self.request_factory = RequestFactory()

    @setup({"querystring_empty": "{% querystring %}"})
    def test_querystring_empty(self):
        """
        Tests the behavior of the querystring template tag when the query string is empty.

        This test case verifies that the querystring template tag correctly handles the case
        where the request URL does not contain any query parameters. It checks that the
        rendered template output is empty, as expected in this scenario.

        The test uses a sample template 'querystring_empty' to test this functionality,
        rendering it with a request context that has an empty query string and asserting
        that the output matches the expected result.

        """
        request = self.request_factory.get("/")
        template = self.engine.get_template("querystring_empty")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "")

    @setup({"querystring_non_empty": "{% querystring %}"})
    def test_querystring_non_empty(self):
        """
        Tests that a template correctly renders a query string when it is non-empty. 

        This test verifies that the query string is properly formatted as a URL query string, 
        with key-value pairs separated by '&' and the query string prefix '?' included. 

        The test uses a sample request with a query string containing one key-value pair, 
        and checks that the rendered output matches the expected query string format.
        """
        request = self.request_factory.get("/", {"a": "b"})
        template = self.engine.get_template("querystring_non_empty")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?a=b")

    @setup({"querystring_multiple": "{% querystring %}"})
    def test_querystring_multiple(self):
        """

        Tests the rendering of a template that handles multiple query string parameters.

        Verifies that the query string parameters 'x' and 'a' are correctly encoded and 
        rendered in the output as '?x=y&a=b'. This ensures that multiple parameters are 
        properly concatenated and formatted in the resulting query string.

        """
        request = self.request_factory.get("/", {"x": "y", "a": "b"})
        template = self.engine.get_template("querystring_multiple")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?x=y&amp;a=b")

    @setup({"querystring_replace": "{% querystring a=1 %}"})
    def test_querystring_replace(self):
        request = self.request_factory.get("/", {"x": "y", "a": "b"})
        template = self.engine.get_template("querystring_replace")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?x=y&amp;a=1")

    @setup({"querystring_add": "{% querystring test_new='something' %}"})
    def test_querystring_add(self):
        request = self.request_factory.get("/", {"a": "b"})
        template = self.engine.get_template("querystring_add")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?a=b&amp;test_new=something")

    @setup({"querystring_remove": "{% querystring test=None a=1 %}"})
    def test_querystring_remove(self):
        """

        Tests the functionality of removing query string parameters.

        This function verifies that specific query string parameters can be removed from a URL.
        It checks if the removal functionality works correctly by comparing the expected output with the actual output.
        The expected output is a query string with the specified parameters removed, while the actual output is generated by rendering a template with a query string removal directive.

        The test case covers the scenario where a query string contains multiple parameters, and only some of them are removed.
        The result is a query string with the remaining parameters, which is then compared to the expected output for validation.

        """
        request = self.request_factory.get("/", {"test": "value", "a": "1"})
        template = self.engine.get_template("querystring_remove")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?a=1")

    @setup({"querystring_remove_nonexistent": "{% querystring nonexistent=None a=1 %}"})
    def test_querystring_remove_nonexistent(self):
        request = self.request_factory.get("/", {"x": "y", "a": "1"})
        template = self.engine.get_template("querystring_remove_nonexistent")
        context = RequestContext(request)
        output = template.render(context)
        self.assertEqual(output, "?x=y&amp;a=1")

    @setup({"querystring_list": "{% querystring a=my_list %}"})
    def test_querystring_add_list(self):
        request = self.request_factory.get("/")
        template = self.engine.get_template("querystring_list")
        context = RequestContext(request, {"my_list": [2, 3]})
        output = template.render(context)
        self.assertEqual(output, "?a=2&amp;a=3")

    @setup({"querystring_query_dict": "{% querystring request.GET a=2 %}"})
    def test_querystring_with_explicit_query_dict(self):
        """

        Tests rendering of querystring template tag with an explicit query dictionary.

        This test case verifies that the querystring template tag correctly renders
        a query string when an explicit dictionary is provided, overriding any
        existing query parameters in the request.

        The test expects the rendered output to only include the query parameters
        specified in the explicit dictionary, ignoring any query parameters present
        in the original request.

        """
        request = self.request_factory.get("/", {"a": 1})
        output = self.engine.render_to_string(
            "querystring_query_dict", {"request": request}
        )
        self.assertEqual(output, "?a=2")

    @setup({"querystring_query_dict_no_request": "{% querystring my_query_dict a=2 %}"})
    def test_querystring_with_explicit_query_dict_and_no_request(self):
        context = {"my_query_dict": QueryDict("a=1&b=2")}
        output = self.engine.render_to_string(
            "querystring_query_dict_no_request", context
        )
        self.assertEqual(output, "?a=2&amp;b=2")

    @setup({"querystring_no_request_no_query_dict": "{% querystring %}"})
    def test_querystring_without_request_or_explicit_query_dict(self):
        msg = "'Context' object has no attribute 'request'"
        with self.assertRaisesMessage(AttributeError, msg):
            self.engine.render_to_string("querystring_no_request_no_query_dict")
