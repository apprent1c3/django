import datetime
import json

from django import forms
from django.core import exceptions, serializers
from django.db import models
from django.test import SimpleTestCase, TestCase

from .models import DurationModel, NullDurationModel


class TestSaveLoad(TestCase):
    def test_simple_roundtrip(self):
        """
        Tests the simple roundtrip functionality of the DurationModel.

        Verifies that a duration can be successfully saved to and retrieved from the database, 
        ensuring that the original and loaded duration values are equal. This test case covers 
        a specific edge case with a large duration value, close to the maximum allowed for 
        microseconds in a timedelta object.
        """
        duration = datetime.timedelta(microseconds=8999999999999999)
        DurationModel.objects.create(field=duration)
        loaded = DurationModel.objects.get()
        self.assertEqual(loaded.field, duration)

    def test_create_empty(self):
        NullDurationModel.objects.create()
        loaded = NullDurationModel.objects.get()
        self.assertIsNone(loaded.field)

    def test_fractional_seconds(self):
        """
        Verifies that fractional seconds are correctly stored and retrieved in the DurationModel.

        Tests the creation, storage, and retrieval of a DurationModel instance with a timedelta value containing fractional seconds.
        Ensures that the value is preserved with precision after being stored in the database and refreshed from the database.
        """
        value = datetime.timedelta(seconds=2.05)
        d = DurationModel.objects.create(field=value)
        d.refresh_from_db()
        self.assertEqual(d.field, value)


class TestQuerying(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.objs = [
            DurationModel.objects.create(field=datetime.timedelta(days=1)),
            DurationModel.objects.create(field=datetime.timedelta(seconds=1)),
            DurationModel.objects.create(field=datetime.timedelta(seconds=-1)),
        ]

    def test_exact(self):
        self.assertSequenceEqual(
            DurationModel.objects.filter(field=datetime.timedelta(days=1)),
            [self.objs[0]],
        )

    def test_gt(self):
        self.assertCountEqual(
            DurationModel.objects.filter(field__gt=datetime.timedelta(days=0)),
            [self.objs[0], self.objs[1]],
        )


class TestSerialization(SimpleTestCase):
    test_data = (
        '[{"fields": {"field": "1 01:00:00"}, "model": "model_fields.durationmodel", '
        '"pk": null}]'
    )

    def test_dumping(self):
        """

        Tests the serialization of a DurationModel instance into JSON format.

        Verifies that the serialized data matches the expected test data, ensuring
        that the model's field, which contains a timedelta object, is correctly
        dumped into a JSON representation.

        """
        instance = DurationModel(field=datetime.timedelta(days=1, hours=1))
        data = serializers.serialize("json", [instance])
        self.assertEqual(json.loads(data), json.loads(self.test_data))

    def test_loading(self):
        """

        Tests whether the instance is loaded correctly from the provided test data in JSON format.
        It verifies that the deserialized instance's field matches the expected datetime timedelta value.

        """
        instance = list(serializers.deserialize("json", self.test_data))[0].object
        self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))


class TestValidation(SimpleTestCase):
    def test_invalid_string(self):
        field = models.DurationField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean("not a datetime", None)
        self.assertEqual(cm.exception.code, "invalid")
        self.assertEqual(
            cm.exception.message % cm.exception.params,
            "“not a datetime” value has an invalid format. "
            "It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.",
        )


class TestFormField(SimpleTestCase):
    # Tests for forms.DurationField are in the forms_tests app.

    def test_formfield(self):
        """
        Tests that the form field generated by a DurationField is an instance of DurationField.

        This test case verifies the correct creation of a form field for a DurationField model field.
        It checks that the form field returned by the formfield() method is of the expected type, 
        forms.DurationField, ensuring proper integration of model and form fields in the application.
        """
        field = models.DurationField()
        self.assertIsInstance(field.formfield(), forms.DurationField)
